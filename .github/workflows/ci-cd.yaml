name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm install

    - name: create .env.production file
      run: |
        echo "VITE_APP_TITLE=Menus
        VITE_API_RELATIVE_PATH=/menus/" > .env.production

    - name: build
      run: npm run build

    - name: save dist folder as artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist
        retention-days: 1

  build-server:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install server dependencies
      run: npm install

    - name: Audit for vulnerabilities
      run: npm audit

    - name: run build
      run: npm run build

    - name: save dist folder as artifact
      uses: actions/upload-artifact@v4
      with:
        name: server-dist
        path: server/dist
        retention-days: 1

    - name: save package.json as artifact
      uses: actions/upload-artifact@v4
      with:
        name: server-package-json
        path: |
          server/package.json
          server/package-lock.json
        retention-days: 1

  server-tests:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4


    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install OpenVPN
      run: sudo apt-get update && sudo apt-get install -y openvpn

    - name: create openvpn config file
      run: echo "${{ secrets.OPENVPN_CONFIG }}" > /tmp/openvpn.conf 

    - name: Configure and Connect /tmp/openvpn.conf to VPN
      run: sudo openvpn --config /tmp/openvpn.conf --daemon 

    - name: Wait for VPN to connect
      run: sleep 10

    - name: ping server
      run: ping -c 1 10.8.0.1

    - name: Install server dependencies
      run: npm install
      
    - name: Run tests
      run: npm run test

  build-docker-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build frontend image for Raspberry Pi (32-bit)
      run: |
        cd frontend
        docker buildx create --use
        docker buildx inspect --bootstrap
        docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_USERNAME }}/menu-frontend:latest -f dockerfile . --push
        cd ..

  build-docker-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # Your GitHub username
        password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub PAT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build backend image for Raspberry Pi (32-bit)
      run: |
        cd server
        docker buildx create --use
        docker buildx inspect --bootstrap
        docker buildx build --platform linux/arm/v7 -t ${{ secrets.DOCKER_USERNAME }}/menu-server:latest -f dockerfile . --push
        cd ..
       
  sftp-upload:
    needs: [build-docker-frontend, build-docker-backend, build-server, server-tests, build-frontend]

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download server artifact
      uses: actions/download-artifact@v4
      with:
        name: server-dist
        path: server-dist

    - name: Download server package.json
      uses: actions/download-artifact@v4
      with:
        name: server-package-json
        path: server-package-json

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend-dist

    - name: Install OpenVPN
      run: sudo apt-get update && sudo apt-get install -y openvpn

    - name: create openvpn config file
      run: echo "${{ secrets.OPENVPN_CONFIG }}" > /tmp/openvpn.conf 

    - name: Configure and Connect /tmp/openvpn.conf to VPN
      run: sudo openvpn --config /tmp/openvpn.conf --daemon 

    - name: Wait for VPN to connect
      run: sleep 10

    - name: ping server
      run: ping -c 1 10.8.0.1
       
    - name: ls server-dist
      run: ls -l /home/runner/work/menus/menus/server-dist

    - name: send dist server to temp folder via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: server-dist
        remote_path: ./deploy
        remote_host: ${{ secrets.SSH_HOST }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_KEY }}

    - name: send package.json and package-lock.json server to temp folder via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: server-package-json/*
        remote_path: ./deploy/server-dist/
        remote_host: ${{ secrets.SSH_HOST }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_KEY }}

    - name: send docker-compose via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: ./docker-compose.yml
        remote_path: ./deploy
        remote_host: ${{ secrets.SSH_HOST }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_KEY }}


    - name: send dist frontend to temp folder via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: frontend-dist
        remote_path: ./deploy
        remote_host: ${{ secrets.SSH_HOST }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_KEY }}

    - name: send menu-frontend docker to temp folder via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete
        path: menu-frontend-docker
        remote_path: ./deploy
        remote_host: ${{ secrets.SSH_HOST }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_KEY }}


    - name: install dependencies
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          echo "Intalling changes..."
          cd deploy
          sh ./install.sh
          exit

